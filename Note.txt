So far we have learned how to work with RabbitMQ and Spring Boot and send messages via RabbitTemplate.
Now we want to implement a better mechanism for sending and receiving messages, namely using JSON as the message format.
This is called implementing a JSON Message Converter, which eliminates the need to manually convert messages.
We send a message (DummyMessage) from the Producer.
This message is stored in JSON format (without manually converting it).
In the Consumer, the message is received and processed without any problems.
Here we have manually converted the message to JSON! But we want this to be done automatically.
(String jsonMessage = objectMapper.writeValueAsString(myMessage);)
🔹 How do we solve this problem?
Using Jackson2JsonMessageConverter, which automatically converts our messages between JSON and Java Object.

Prefetch Count allows you to control how many messages are sent to a consumer at a time.
Suppose you set the prefetch count to 250. Now, when a consumer connects to RabbitMQ and requests messages to process, 250 messages are sent to the consumer at a time.
If the number of messages is large and the consumer processing is slow, some consumers may become idle because they have no messages to process, even if other consumers are processing.
For example, if you have 500 messages in the queue, and you have 2 consumers each receiving 250 messages, but the consumers are processing very slowly (say 20 seconds per message), the other consumers may not receive any messages and become idle.
Scenario 1:
When we set the prefetch value to 250, all 500 messages are sent to two consumers. But since consumers are slow, all messages are sent to consumers 1 and 2 and consumer 3 does not receive any messages.
Scenario 2:
Now that we have changed the prefetch count to 1, consumers receive messages one by one. Therefore, more consumers are active simultaneously and all messages are distributed equally among consumers.
In case of slow processing, a low prefetch count (e.g. 1) can be useful so that messages are sent one by one and all consumers are active.
For faster processing, we can choose a higher prefetch count (e.g. 250) so that messages are sent to consumers quickly.

Default prefetch value:
In Spring, the default value for prefetch is 250. This means that each consumer can hold up to 250 unacknowledged messages in memory. This value is not set by default in the application.yaml configuration.

Effect of setting the prefetch value:
If we change the prefetch value to 1, this means that each consumer can only hold one unacknowledged message in memory.
In this case, when the producer sends 500 messages to the queue and then stops, these messages are distributed evenly among all consumers and each consumer receives the messages one by one.

Why is prefetch important?:
If the processing time in consumers is long, a low prefetch value (such as 1) helps to distribute the messages evenly among all consumers and no consumer is left without work. Whereas if the prefetch value is high (e.g. 250), some consumers may be busy processing messages while others remain idle.

🔹 When a single consumer listens to a single queue, the processing order is absolutely guaranteed.
✅ Messages are processed in the same order they arrived at the queue.
For example:
📩 Messages: A → B → C → D → E
🔄 Processing order: A → B → C → D → E (exactly the same order)

If we have multiple consumers
🔹 When multiple consumers are on the same queue, the processing order is no longer guaranteed!
🔹 RabbitMQ divides messages between consumers based on the prefetch value.
✅ Example: Let's say we have 10 messages and 2 consumers, each with prefetch = 50.
✅ Messages are divided like this:
Messages 1, 3, 5, 7, 9 → to the first consumer
Messages 2, 4, 6, 8, 10 → to the second consumer
💡 But if one of the consumers is slower, its messages are processed later.
For example:
Consumer 1: Processes each message for 1 second.
Consumer 2: Processes each message for 3 seconds.
❌ Result: The processing order is messed up!
📩 Received messages: 1, 2, 3, 5, 4, 6, 7, 8, 9, 10
🚨 Problem: Message 5 was processed before message 4! So the order is not respected.

Why is the order of message processing important?
🔹 Suppose we have an Invoice system and three types of messages are sent to a queue:
Invoice Created
Invoice Updated
Invoice Paid
🛑 If multiple consumers process these messages at the same time, the order may get messed up:
❌ For example, the message "Paid" is processed first and then "Updated"!
✅ In this case, the invoice status may be displayed incorrectly.

How to have multiple consumers but maintain the processing order?
✅ There is no standard RabbitMQ solution for this problem.
✅ But there are two general ways to handle this issue:

Method 1: One queue for each message type
🔹 Instead of putting all messages in one queue, create a separate queue for each message type.
✅ queue.invoice.created
✅ queue.invoice.updated
✅ queue.invoice.paid
🚀 This method keeps important messages like Invoice Paid in a separate queue and their order is not disturbed.

Method 2: Using "Message Grouping"
🔹 In some messaging systems like Kafka, we have a concept called Message Key that sends all messages related to a specific group to a specific consumer.
🔹 In RabbitMQ, this is not possible by default, but you can always send related messages to a specific consumer using Consistent Hash Exchange.

How to handle multiple message types in RabbitMQ?
In RabbitMQ, there are two general methods for handling messages of different types:

Method 1: One Queue per Message Type
🔹 In this method, we have a separate queue for each message type.
🔹 Each queue receives only one type of message with a specific routing key.
✅ Example:
Suppose we have two message types:
Invoice Paid
Invoice Created
In this method, we will have two separate queues:
📌 queue.invoice.paid (receives only paid messages)
📌 queue.invoice.created (receives only created messages)
🚀 Advantages:
✅ Simpler code for the consumer (since each queue has only one message type).
✅ It is possible to manage the processing of each message type separately.
❌ Disadvantages:
🔸 The number of queues increases, and we have to manage all of them.

Method 2: One Queue for Multiple Message Types
🔹 In this method, we have one queue that receives multiple message types.
🔹 Messages are identified using a header or a variable in the payload to indicate what type they are.
✅ Example:
We put the same previous messages (Invoice Paid and Invoice Created) in a common queue:
📌 queue.invoice (receives both paid and created messages)
🔹 In this method, we identify the message type through the message header.
🔹 In Spring, this value is automatically placed in the Type ID.
🚀 Advantages:
✅ The number of queues is less, so RabbitMQ management becomes easier.
❌ Disadvantages:
🔸 Consumers need to check what type the message is, which makes coding a bit more complicated.
🔸 In languages other than Java/Spring, message type conversion may be harder.

Ensuring Message Order in RabbitMQ with Consistent Hash Exchange
If we have multiple consumers, messages may be processed out of order, causing the final data state to be incorrect. To solve this problem and maintain the order of messages while using multiple consumers, we use Consistent Hash Exchange

❌ Problem with simultaneous message consumption
Suppose we have two messages with information about an invoice (Invoice Y):
First message: Invoice paid
Second message: New invoice created
If consumer 1 is faster and processes the first message, the invoice status is saved as "paid".
But if consumer 2 is slower and processes the second message later, the invoice status is returned to "new"!
✅ Result? The final data is incorrect!

✔ Solution: Use Consistent Hash Exchange
With Consistent Hash Exchange, we route messages to the same specified queue based on a unique identifier (e.g. invoiceNumber).
🔹 Messages related to Invoice X → always go to queue.invoice.1
🔹 Messages related to Invoice Y → always go to queue.invoice.2
✅ Now each invoice is always processed by a consumer and the order of messages is preserved!

📌 Implementation Steps
1. Enable the Consistent Hash Exchange plugin
rabbitmq-plugins list # Show RabbitMQ plugins
rabbitmq-plugins enable rabbitmq_consistent_hash_exchange

The main difference of Consistent Hash Exchange is that at the time of Binding we must specify a number as Routing Key which determines the ratio of message distribution.
For example:
🔹 queue.invoice.1 → number 10
🔹 queue.invoice.2 → number 5
✅ That is, queue.invoice.1 receives twice as many messages as queue.invoice.2.

What is the problem?
When we send a message, it may not be queued for various reasons:
The Exchange is wrong (does not exist).
The Routing Key is wrong (no queue is connected to it).
The message is not sent to a queue (for example, no queue is connected in Fanout Exchange).
What is the solution?
RabbitMQ has a mechanism called Publisher Confirms that tells us asynchronously (Async Callback) whether the message was sent correctly or an error occurred.

Implementation steps
Enable send confirmation in application.yaml
Enable Publisher Confirms so that we know whether the message was actually sent or not.
Enable Publisher Returns so that we can check if the Routing Key is wrong.

publisher-confirm-type: correlated
Enables confirmation of sending messages to Exchange.
This option checks whether the message has been sent to Exchange or not.
The correlated value allows us to track each message with CorrelationData.
publisher-returns: true
Checks whether the message has reached the Queue or not.
If an Exchange is found, but no queue is connected to it, the message is returned.
template.mandatory: true
Forces RabbitMQ to return messages that are not in any queue.
When this value is true, RabbitMQ will return invalid messages to the producer instead of dropping them.
This property works in conjunction with publisher-returns.

📌 What is CorrelationData in RabbitMQ?
CorrelationData is a class in Spring AMQP that is used to track RabbitMQ confirmations at the message level. This class does not belong to RabbitMQ but is defined in Spring and is used to communicate with RabbitMQ.
🔍 Why do we need CorrelationData?
When sending a message to RabbitMQ, we may want to know:
✅ Did the message reach the Exchange? (Publisher Confirms)
✅ Did the message reach the Queue? (Publisher Returns)
✅ If there was a problem, which message had the problem?
For this, we use CorrelationData. This class creates a unique identifier (ID) for each message, so that we can associate the RabbitMQ response to a specific message.

📌 What is Request-Reply in RabbitMQ?
✅ In this lesson, we will learn how to process a message and send a reply.
✅ The message reaches a consumer and after processing, it publishes the reply to a new queue.
✅ This method is very useful in microservice architecture, because it keeps the systems independent from each other.

📌 Scenario: Invoice Cancellation
1️⃣ A message is sent to RabbitMQ to cancel an invoice.
2️⃣ The consumer receives the message from queue.invoice.
3️⃣ If the invoice cancellation is successful ➝ A journal entry is created.
4️⃣ If the invoice cancellation is unsuccessful ➝ A warning email is sent to the finance manager.
5️⃣ The message is sent to a new queue to prevent problems if the accounting service is unavailable.

📌 Possible problem and solution
❌ If the accounting service is not available at the moment the consumer processes the message, the financial information will not be recorded.
✅ Solution: Send the message to another queue (queue.invoice.cancel) for another consumer to process it.

📌 Difference between Apache Kafka and RabbitMQ

✅ How messages are stored
In Kafka, messages are stored on disk and persist for a certain period of time (e.g. 7 days), even if they have been consumed.
In RabbitMQ, messages are kept only until a consumer acknowledges them. After processing, they are deleted.

✅ Queue management and message delivery
In Kafka, the producer determines in which topic and partition the message should be stored.
In RabbitMQ, the producer sends the message to the Exchange, which decides which queue to send the message to using the routing key.

✅ Message processing model
📌 Kafka → Pull model:
🔹 The consumer receives (pulls) messages.
🔹 This method ensures that the order of messages in a partition is maintained.

📌 RabbitMQ → Push model:
🔹 Messages are sent to the consumer (Pushed).
🔹 If the producer is faster than the consumer, RabbitMQ uses Prefetch Limit so that the consumer does not have too much load.

✅ Which one to choose?
Kafka is suitable for processing large amounts of data and streaming.
Banks, e-commerce companies and logging systems use Kafka.
RabbitMQ is suitable for real-time messaging systems and work distribution.
Messengers, notification systems and background job processing management use RabbitMQ.
If you need a simple and fast system for messaging.

⚡ Key Differences
Features of Kafka RabbitMQ
How messages are maintained
Kafka: Messages are stored on disk and persist for a certain period of time. RabbitMQ: Messages are stored in memory or disk, but are deleted after being received by the consumer.
Message delivery mechanism
Pull → Consumer pulls messages from Kafka.
Push → RabbitMQ sends messages to the consumer.
Message management
Kafka: Messages are organized by Topic and Partition.
RabbitMQ: Messages are managed by Exchange and sent to Queues.
Message order guarantee
Kafka: In a Partition, the order of messages is guaranteed.
RabbitMQ: In a Queue, the processing order may change (due to the Competing Consumers model).

General Comparison Between Queue and Stream in RabbitMQ
Queue Stream
How to Store Messages
Queue: The message is deleted after consumption.
Stream: The message remains after consumption.
Consumers
Queue: Each message is processed by only one consumer.
Stream: Each message can be processed by multiple consumers.
Access to Messages
Queue: Messages are read only once.
Stream: Messages can be read multiple times.
Performance in Large Message Volume
Queue: If the messages become too large, the performance decreases.
Stream: It is optimized for large message volume and has better performance.
Message Replay Capability
Queue: There is no possibility to reread previous messages.
Stream: The consumer can start reading from anywhere in the Stream.
Managing the number of consumers
Queue: To send a message to multiple consumers, we need a Fan-out Exchange and multiple Queues.
Stream: Multiple consumers can read a Stream directly.
Queue: Does not require plugin activation.
Stream: Requires Stream plugin activation.

How Queue works in RabbitMQ
In the traditional Queue model:
A message is sent.
A consumer receives the message and processes it.
After processing, the message is removed from the Queue.
If the message is sent to multiple consumers, a separate Queue must be created for each consumer.
Problem: If 100 consumers want to read a message, we need to create 100 separate Queues, which is difficult to manage.

How Streams work in RabbitMQ
In the Stream model:
A message is sent and added to the end of the Stream.
Multiple consumers can read the same message at the same time.
Messages remain in the Stream and are only deleted when the time limit (Time To Live) is reached.
No need to create multiple Queues.
Advantage: If 100 consumers want to read a message, they can all use one Stream and no need for 100 Queues

🔹 Queue Example
We send 3 green messages (Green1, Green2, Green3) to the Queue.
Two consumers (Q1 and Q2) start working.
Q1 consumes Green1 and Green2 messages.
Q2 consumes Green3 message.
Now the Queue is empty and no new consumers can receive these messages.
📌 Result: Messages are processed only once and are deleted after processing.

🔹 Stream Example
We send 3 yellow messages (Yellow1, Yellow2, Yellow3) to the Stream.
Two consumers (S1 and S2) start working.
S1 reads the messages Yellow1, Yellow2, and Yellow3.
S2 also reads the messages Yellow1, Yellow2, and Yellow3.
The messages still remain in the Stream and new consumers can process these messages.
📌 Result: The messages are not deleted and multiple consumers can use the same message.

🔹 RabbitMQ Queue is designed to unload messages quickly, but performance degrades if the number of messages increases.
🔹 Stream is designed to process large amounts of data and has better performance.

Enabling RabbitMQ Stream
        - docker exec -it rabbitmq bash
        - rabbitmq-plugins enable rabbitmq_stream
        - docker restart rabbitmq

